'use strict';

var ConcatenatedModule$1 = require('../../../../_virtual/ConcatenatedModule.js');
require('../../../lodash/lodash.js');
require('./Module.js');
require('./ContentModule.js');
require('./ContentFolder.js');
require('./utils.js');
var Module = require('../../../../_virtual/Module.js');
var ContentModule = require('../../../../_virtual/ContentModule.js');
var ContentFolder = require('../../../../_virtual/ContentFolder.js');
var utils = require('../../../../_virtual/utils2.js');
var lodash = require('../../../../_virtual/lodash.js');

Object.defineProperty(ConcatenatedModule$1.__exports, "__esModule", {
  value: true
});
ConcatenatedModule$1.__exports.default = void 0;

var _lodash = _interopRequireDefault(lodash.lodash.exports);

var _Module = _interopRequireDefault(Module.__exports);

var _ContentModule = _interopRequireDefault(ContentModule.__exports);

var _ContentFolder = _interopRequireDefault(ContentFolder.__exports);

var _utils = utils.__exports;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ConcatenatedModule extends _Module.default {
  constructor(name, data, parent) {
    super(name, data, parent);
    this.name += ' (concatenated)';
    this.children = Object.create(null);
    this.fillContentModules();
  }

  fillContentModules() {
    this.data.modules.forEach(moduleData => this.addContentModule(moduleData));
  }

  addContentModule(moduleData) {
    const pathParts = (0, _utils.getModulePathParts)(moduleData);

    if (!pathParts) {
      return;
    }

    const [folders, fileName] = [pathParts.slice(0, -1), _lodash.default.last(pathParts)];
    let currentFolder = this;
    folders.forEach(folderName => {
      let childFolder = currentFolder.getChild(folderName);

      if (!childFolder) {
        childFolder = currentFolder.addChildFolder(new _ContentFolder.default(folderName, this));
      }

      currentFolder = childFolder;
    });
    const module = new _ContentModule.default(fileName, moduleData, this);
    currentFolder.addChildModule(module);
  }

  getChild(name) {
    return this.children[name];
  }

  addChildModule(module) {
    module.parent = this;
    this.children[module.name] = module;
  }

  addChildFolder(folder) {
    folder.parent = this;
    this.children[folder.name] = folder;
    return folder;
  }

  mergeNestedFolders() {
    _lodash.default.invokeMap(this.children, 'mergeNestedFolders');
  }

  toChartData() {
    return { ...super.toChartData(),
      concatenated: true,
      groups: _lodash.default.invokeMap(this.children, 'toChartData')
    };
  }

}

ConcatenatedModule$1.__exports.default = ConcatenatedModule;
