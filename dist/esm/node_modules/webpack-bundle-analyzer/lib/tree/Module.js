import { __exports as Module$1 } from '../../../../_virtual/Module.js';
import '../../../lodash/lodash.js';
import '../../../gzip-size/index.js';
import './Node.js';
import { g as gzipSize } from '../../../../_virtual/index3.js';
import { __exports as Node } from '../../../../_virtual/Node.js';
import { l as lodash } from '../../../../_virtual/lodash.js';

Object.defineProperty(Module$1, "__esModule", {
  value: true
});
Module$1.default = void 0;

var _lodash = _interopRequireDefault(lodash.exports);

var _gzipSize = _interopRequireDefault(gzipSize.exports);

var _Node = _interopRequireDefault(Node);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Module extends _Node.default {
  constructor(name, data, parent) {
    super(name, parent);
    this.data = data;
  }

  get src() {
    return this.data.parsedSrc;
  }

  set src(value) {
    this.data.parsedSrc = value;
    delete this._gzipSize;
  }

  get size() {
    return this.data.size;
  }

  set size(value) {
    this.data.size = value;
  }

  get parsedSize() {
    return this.src ? this.src.length : undefined;
  }

  get gzipSize() {
    if (!_lodash.default.has(this, '_gzipSize')) {
      this._gzipSize = this.src ? _gzipSize.default.sync(this.src) : undefined;
    }

    return this._gzipSize;
  }

  mergeData(data) {
    if (data.size) {
      this.size += data.size;
    }

    if (data.parsedSrc) {
      this.src = (this.src || '') + data.parsedSrc;
    }
  }

  toChartData() {
    return {
      id: this.data.id,
      label: this.name,
      path: this.path,
      statSize: this.size,
      parsedSize: this.parsedSize,
      gzipSize: this.gzipSize
    };
  }

}

Module$1.default = Module;
